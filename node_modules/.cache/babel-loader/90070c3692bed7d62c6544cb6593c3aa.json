{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\wanna-type\\\\src\\\\Components\\\\CustomInput\\\\CustomInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport * as PropTypes from 'prop-types';\nimport FinishBoard from '../Board/FinishBoard';\nimport style from './CustomInput.module.css';\nimport ChangeLayout from '../common/ChangeLayout';\nimport DisplayText from '../Display/DisplayText';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomInput = props => {\n  _s();\n\n  const [isDisabled, disableInput] = React.useState(false);\n  const [isPassed, passedResult] = React.useState(false);\n  const [changeLayout, changeLayoutHandler] = React.useState(false);\n  const [msPassed, setStopwatch] = React.useState(0);\n  const [value, changeValue] = React.useState('');\n  React.useEffect(() => {\n    if (value.length !== 0) {\n      // handleMistake();\n      props.passLastLetter(value.slice(-1));\n    }\n  }, [value]);\n  React.useEffect(() => {\n    if (value.length === props.generatedText.length) {\n      passedResult(true);\n      disableInput(true);\n    }\n  }, [value.length, props.generatedText.length]);\n  React.useEffect(() => {\n    // Calculate Lesson Percentage \n    let percentage = Math.ceil(value.length / props.generatedText.length * 100);\n    props.completionPercentage(percentage);\n  });\n  React.useEffect(() => {\n    if (value.length === 1) {\n      setStopwatch(new Date().getTime());\n    }\n\n    if (value.length !== 0) {\n      let timePassedMs = new Date().getTime();\n      let timePassedMin = (timePassedMs - msPassed) / 1000 / 60;\n      let CPM = Math.ceil(value.length / timePassedMin);\n      props.charactersPerMinute(CPM);\n    }\n  }, [value.length]); // React.useEffect(() => {\n  //     if (props.numberOfMistakes === 2) {\n  //         disableInput(true);\n  //         passedResult(false);\n  //     }\n  //     if (value.length !== 0) {\n  //         if (value.slice(-1) !== props.generatedText[value.length - 1]) {\n  //             console.log(value.slice(-1))\n  //             props.mistakeCounter();\n  //             props.handleMistake(true);\n  //         } else {\n  //             props.handleMistake(false);\n  //         }\n  //     }\n  // }, [props, value]);\n  // const handleMistake = () => {\n  //     if (props.numberOfMistakes === 2) {\n  //         disableInput(true);\n  //         passedResult(false);\n  //     }\n  //     if (value.slice(-1) !== props.generatedText[value.length - 1]) {\n  //         props.mistakeCounter();\n  //         props.handleMistake(true);\n  //     } else {\n  //         props.handleMistake(false);\n  //     }\n  // };\n  // const completionPercentage = () => {\n  //     let percentage = Math.ceil(value.length / props.generatedText.length * 100);\n  //     props.completionPercentage(percentage);\n  // };\n\n  const reloadLesson = () => {\n    setStopwatch(0);\n    disableInput(false);\n    passedResult(false);\n    changeValue('');\n    props.reloadLesson();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.InputBox,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      autoFocus: true,\n      disabled: isDisabled,\n      onChange: event => changeValue(event.target.value),\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(DisplayText, {\n      generatedText: props.generatedText,\n      value: value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), isDisabled && /*#__PURE__*/_jsxDEV(FinishBoard, {\n      isPassed: isPassed,\n      reloadLesson: reloadLesson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 28\n    }, this), changeLayout && /*#__PURE__*/_jsxDEV(ChangeLayout, {\n      layoutHandler: changeLayoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CustomInput, \"oOUVTkkGM96xbCqfjBGAUnhpn3w=\");\n\n_c = CustomInput;\nexport default CustomInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomInput\");","map":{"version":3,"sources":["C:/projects/wanna-type/src/Components/CustomInput/CustomInput.jsx"],"names":["React","PropTypes","FinishBoard","style","ChangeLayout","DisplayText","CustomInput","props","isDisabled","disableInput","useState","isPassed","passedResult","changeLayout","changeLayoutHandler","msPassed","setStopwatch","value","changeValue","useEffect","length","passLastLetter","slice","generatedText","percentage","Math","ceil","completionPercentage","Date","getTime","timePassedMs","timePassedMin","CPM","charactersPerMinute","reloadLesson","InputBox","event","target"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport FinishBoard from '../Board/FinishBoard';\r\nimport style from './CustomInput.module.css';\r\nimport ChangeLayout from '../common/ChangeLayout';\r\nimport DisplayText from '../Display/DisplayText';\r\n\r\nconst CustomInput = (props) => {\r\n    const [isDisabled, disableInput] = React.useState(false);\r\n    const [isPassed, passedResult] = React.useState(false);\r\n\r\n    const [changeLayout, changeLayoutHandler] = React.useState(false);\r\n    const [msPassed, setStopwatch] = React.useState(0);\r\n    const [value, changeValue] = React.useState('');\r\n\r\n    React.useEffect(() => {\r\n        if (value.length !== 0) {\r\n            // handleMistake();\r\n            props.passLastLetter(value.slice(-1));\r\n        }\r\n    }, [value]);\r\n\r\n    React.useEffect(() => {\r\n        if (value.length === props.generatedText.length) {\r\n            passedResult(true);\r\n            disableInput(true);\r\n        }\r\n    }, [value.length, props.generatedText.length]);\r\n\r\n    React.useEffect(() => {\r\n        // Calculate Lesson Percentage \r\n        let percentage = Math.ceil(value.length / props.generatedText.length * 100);\r\n        props.completionPercentage(percentage);\r\n    });\r\n\r\n    React.useEffect(() => {\r\n        if (value.length === 1) {\r\n            setStopwatch(new Date().getTime());\r\n        }\r\n        if (value.length !== 0) {\r\n            let timePassedMs = new Date().getTime();\r\n            let timePassedMin = (timePassedMs - msPassed) / 1000 / 60;\r\n            let CPM = Math.ceil(value.length / timePassedMin);\r\n\r\n            props.charactersPerMinute(CPM);\r\n        }\r\n    }, [value.length]);\r\n\r\n    // React.useEffect(() => {\r\n    //     if (props.numberOfMistakes === 2) {\r\n    //         disableInput(true);\r\n    //         passedResult(false);\r\n    //     }\r\n    //     if (value.length !== 0) {\r\n    //         if (value.slice(-1) !== props.generatedText[value.length - 1]) {\r\n    //             console.log(value.slice(-1))\r\n    //             props.mistakeCounter();\r\n    //             props.handleMistake(true);\r\n    //         } else {\r\n    //             props.handleMistake(false);\r\n    //         }\r\n    //     }\r\n\r\n    // }, [props, value]);\r\n\r\n    // const handleMistake = () => {\r\n    //     if (props.numberOfMistakes === 2) {\r\n    //         disableInput(true);\r\n    //         passedResult(false);\r\n    //     }\r\n\r\n    //     if (value.slice(-1) !== props.generatedText[value.length - 1]) {\r\n    //         props.mistakeCounter();\r\n    //         props.handleMistake(true);\r\n    //     } else {\r\n    //         props.handleMistake(false);\r\n    //     }\r\n    // };\r\n\r\n    // const completionPercentage = () => {\r\n    //     let percentage = Math.ceil(value.length / props.generatedText.length * 100);\r\n    //     props.completionPercentage(percentage);\r\n    // };\r\n\r\n    const reloadLesson = () => {\r\n        setStopwatch(0);\r\n        disableInput(false);\r\n        passedResult(false);\r\n        changeValue('');\r\n\r\n        props.reloadLesson();\r\n    }\r\n\r\n    return (\r\n        <div className={style.InputBox}>\r\n            <input autoFocus\r\n                disabled={isDisabled}\r\n                onChange={event => changeValue(event.target.value)}\r\n                value={value}\r\n            />\r\n\r\n            <DisplayText generatedText={props.generatedText} value={value} />\r\n\r\n            {isDisabled && <FinishBoard isPassed={isPassed} reloadLesson={reloadLesson} />}\r\n\r\n            {changeLayout && <ChangeLayout layoutHandler={changeLayoutHandler} />}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CustomInput;"]},"metadata":{},"sourceType":"module"}