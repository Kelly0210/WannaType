{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\wanna-type\\\\src\\\\Components\\\\CustomInput\\\\CustomInput.jsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport * as PropTypes from 'prop-types';\nimport FinishBoard from '../Board/FinishBoard';\nimport style from './CustomInput.module.css';\nimport ChangeLayout from '../common/ChangeLayout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CustomInput = props => {\n  _s();\n\n  const [disabled, handleDisable] = React.useState(false);\n  const [changeLayout, changeLayoutHandler] = React.useState(false);\n  const [result, changeResult] = React.useState(false);\n  const [msPassed, msPassedHandler] = React.useState(0);\n\n  const handleChange = event => {\n    let inputValue = event.target.value;\n    let generatedText = props.generatedText;\n    let allowedSymbols = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', ',', '.', `'`, ' ', ';', ':'];\n\n    if (inputValue.length === 1) {\n      msPassedHandler(new Date().getTime());\n    }\n\n    if (allowedSymbols.includes(inputValue.slice(-1))) {\n      handleMistake(inputValue, generatedText);\n      handleComplete(inputValue, generatedText);\n      completionPercentage(inputValue, generatedText);\n      charactersPerMinute(inputValue);\n      carriage();\n      props.passLastLetter(inputValue.slice(-1));\n    } else {\n      layoutHandler(true);\n    }\n  };\n\n  const handleMistake = (inputValue, generatedText) => {\n    if (props.numberOfMistake === 2) {\n      handleDisable();\n    }\n\n    if (inputValue.slice(-1) !== generatedText[inputValue.length - 1]) {\n      props.mistakeCounter();\n      props.handleMistake(true);\n    } else {\n      props.handleMistake(false);\n    }\n  };\n\n  const completionPercentage = (inputValue, generatedText) => {\n    let percentage = Math.ceil(inputValue.length / generatedText.length * 100);\n    props.completionPercentage(percentage);\n  };\n\n  const charactersPerMinute = inputValue => {\n    let timePassedMs = new Date().getTime();\n    let timePassedMin = (timePassedMs - msPassed) / 1000 / 60;\n    let cpm = Math.ceil(inputValue.length / timePassedMin);\n    props.charactersPerMinute(cpm);\n  };\n\n  const handleComplete = (inputValue, generatedText) => {\n    if (inputValue.length === generatedText.length) {\n      changeResult(true);\n      handleDisable();\n    }\n  }; // handleDisable = () => {\n  //     this.setState({ disabled: true });\n  // }\n\n\n  const layoutHandler = boolean => {\n    this.setState({\n      changeLayout: boolean\n    });\n  };\n\n  const carriage = () => {\n    let leftText = document.getElementById('leftText');\n    let finishText = document.getElementById('finishText');\n    finishText.textContent += leftText.textContent[0];\n    leftText.textContent = leftText.textContent.slice(1);\n  };\n\n  const reloadLesson = () => {\n    this.setState({\n      startTimeMs: 0,\n      changeLayout: false,\n      disabled: false,\n      result: false\n    });\n    msPassedHandler(0);\n    handleDisable(false);\n    result;\n    let finishText = document.getElementById('finishText');\n    let leftText = document.getElementById('leftText');\n    let inputField = document.getElementById('inputField');\n    finishText.textContent = '';\n    leftText.textContent = '';\n    inputField.value = '';\n    props.reloadLesson();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: style.InputBox,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      autoFocus: true,\n      disabled: disabled,\n      onChange: handleChange,\n      id: \"inputField\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n      className: style.displayText,\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"finishText\",\n        className: style.cursor\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        id: \"leftText\",\n        className: style.unfinishedText,\n        children: props.generatedText\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }, this), disabled && /*#__PURE__*/_jsxDEV(FinishBoard, {\n      result: result,\n      reloadLesson: reloadLesson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 26\n    }, this), changeLayout && /*#__PURE__*/_jsxDEV(ChangeLayout, {\n      layoutHandler: layoutHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 30\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CustomInput, \"bpd84zjEIvQ78J9ioFfc0Gy3rsU=\");\n\n_c = CustomInput;\nexport default CustomInput; // class CustomInput extends React.Component {\n//     constructor(props) {\n//         super(props)\n//         this.state = {\n//             startTimeMs: 0,\n//             changeLayout: false,\n//             disabled: false,\n//             result: false,\n//         }\n//     }\n//     handleChange = (event) => {\n//         let inputValue = event.target.value;\n//         let generatedText = this.props.generatedText;\n//         let allowedSymbols = [\n//             'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\n//             'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\n//             'u', 'v', 'w', 'x', 'y', 'z',\n//             'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\n//             'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\n//             'U', 'V', 'W', 'X', 'Y', 'Z',\n//             '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',\n//             ',', '.', `'`, ' ', ';', ':'\n//         ];\n//         if (inputValue.length === 1) {\n//             this.setState({ startTimeMs: new Date().getTime() });\n//         }\n//         if (allowedSymbols.includes(inputValue.slice(-1))) {\n//             this.handleMistake(inputValue, generatedText);\n//             this.handleComplete(inputValue, generatedText);\n//             this.completionPercentage(inputValue, generatedText);\n//             this.charactersPerMinute(inputValue);\n//             this.carriage();\n//             this.props.passLastLetter(inputValue.slice(-1));\n//         } else {\n//             this.layoutHandler(true);\n//         }\n//     }\n//     handleMistake = (inputValue, generatedText) => {\n//         if (this.props.numberOfMistake === 2) {\n//             this.handleDisable();\n//         }\n//         if (inputValue.slice(-1) !== generatedText[inputValue.length - 1]) {\n//             this.props.mistakeCounter();\n//             this.props.handleMistake(true);\n//         } else {\n//             this.props.handleMistake(false);\n//         }\n//     }\n//     completionPercentage = (inputValue, generatedText) => {\n//         let percentage = Math.ceil(inputValue.length / generatedText.length * 100);\n//         this.props.completionPercentage(percentage);\n//     }\n//     charactersPerMinute = (inputValue) => {\n//         let startTimeMs = this.state.startTimeMs;\n//         let timePassedMs = new Date().getTime();\n//         let timePassedMin = (timePassedMs - startTimeMs) / 1000 / 60;\n//         let cpm = Math.ceil(inputValue.length / timePassedMin);\n//         this.props.charactersPerMinute(cpm);\n//     }\n//     handleComplete = (inputValue, generatedText) => {\n//         if (inputValue.length === generatedText.length) {\n//             this.setState({ result: true });\n//             this.handleDisable();\n//         }\n//     }\n//     handleDisable = () => {\n//         this.setState({ disabled: true });\n//     }\n//     layoutHandler = (boolean) => {\n//         this.setState({ changeLayout: boolean })\n//     }\n//     carriage = () => {\n//         let leftText = document.getElementById('leftText');\n//         let finishText = document.getElementById('finishText');\n//         finishText.textContent += leftText.textContent[0];\n//         leftText.textContent = leftText.textContent.slice(1);\n//     }\n//     reloadLesson = () => {\n//         this.setState({\n//             startTimeMs: 0,\n//             changeLayout: false,\n//             disabled: false,\n//             result: false,\n//         });\n//         let finishText = document.getElementById('finishText');\n//         let leftText = document.getElementById('leftText');\n//         let inputField = document.getElementById('inputField');\n//         finishText.textContent = '';\n//         leftText.textContent = '';\n//         inputField.value = '';\n//         this.props.reloadLesson();\n//     }\n//     render = () => {\n//         return (\n//             <div className={style.InputBox}>\n//                 <input autoFocus\n//                     disabled={this.state.disabled}\n//                     onChange={this.handleChange}\n//                     id='inputField'\n//                 />\n//                 <span className={style.displayText}>\n//                     <span id='finishText' className={style.cursor} />\n//                     <span id='leftText' className={style.unfinishedText}>{this.props.generatedText}</span>\n//                 </span>\n//                 {this.state.disabled && <FinishBoard result={this.state.result} reloadLesson={this.reloadLesson} />}\n//                 {this.state.changeLayout && <ChangeLayout layoutHandler={this.layoutHandler} />}\n//             </div>\n//         )\n//     }\n// }\n// CustomInput.propTypes = {\n//     generatedText: PropTypes.string,\n//     reloadLesson: PropTypes.func,\n//     numberOfMistake: PropTypes.number,\n//     handleMistake: PropTypes.func,\n//     mistakeCounter: PropTypes.func,\n//     completionPercentage: PropTypes.func,\n//     charactersPerMinute: PropTypes.func,\n//     passLastLetter: PropTypes.func\n// }\n// export default CustomInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"CustomInput\");","map":{"version":3,"sources":["C:/projects/wanna-type/src/Components/CustomInput/CustomInput.jsx"],"names":["React","PropTypes","FinishBoard","style","ChangeLayout","CustomInput","props","disabled","handleDisable","useState","changeLayout","changeLayoutHandler","result","changeResult","msPassed","msPassedHandler","handleChange","event","inputValue","target","value","generatedText","allowedSymbols","length","Date","getTime","includes","slice","handleMistake","handleComplete","completionPercentage","charactersPerMinute","carriage","passLastLetter","layoutHandler","numberOfMistake","mistakeCounter","percentage","Math","ceil","timePassedMs","timePassedMin","cpm","boolean","setState","leftText","document","getElementById","finishText","textContent","reloadLesson","startTimeMs","inputField","InputBox","displayText","cursor","unfinishedText"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,SAAZ,MAA2B,YAA3B;AACA,OAAOC,WAAP,MAAwB,sBAAxB;AACA,OAAOC,KAAP,MAAkB,0BAAlB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;;;AAGA,MAAMC,WAAW,GAAIC,KAAD,IAAW;AAAA;;AAC3B,QAAM,CAACC,QAAD,EAAWC,aAAX,IAA4BR,KAAK,CAACS,QAAN,CAAe,KAAf,CAAlC;AACA,QAAM,CAACC,YAAD,EAAeC,mBAAf,IAAsCX,KAAK,CAACS,QAAN,CAAe,KAAf,CAA5C;AACA,QAAM,CAACG,MAAD,EAASC,YAAT,IAAyBb,KAAK,CAACS,QAAN,CAAe,KAAf,CAA/B;AACA,QAAM,CAACK,QAAD,EAAWC,eAAX,IAA8Bf,KAAK,CAACS,QAAN,CAAe,CAAf,CAApC;;AAEA,QAAMO,YAAY,GAAIC,KAAD,IAAW;AAC5B,QAAIC,UAAU,GAAGD,KAAK,CAACE,MAAN,CAAaC,KAA9B;AACA,QAAIC,aAAa,GAAGf,KAAK,CAACe,aAA1B;AAEA,QAAIC,cAAc,GAAG,CACjB,GADiB,EACZ,GADY,EACP,GADO,EACF,GADE,EACG,GADH,EACQ,GADR,EACa,GADb,EACkB,GADlB,EACuB,GADvB,EAC4B,GAD5B,EAEjB,GAFiB,EAEZ,GAFY,EAEP,GAFO,EAEF,GAFE,EAEG,GAFH,EAEQ,GAFR,EAEa,GAFb,EAEkB,GAFlB,EAEuB,GAFvB,EAE4B,GAF5B,EAGjB,GAHiB,EAGZ,GAHY,EAGP,GAHO,EAGF,GAHE,EAGG,GAHH,EAGQ,GAHR,EAIjB,GAJiB,EAIZ,GAJY,EAIP,GAJO,EAIF,GAJE,EAIG,GAJH,EAIQ,GAJR,EAIa,GAJb,EAIkB,GAJlB,EAIuB,GAJvB,EAI4B,GAJ5B,EAKjB,GALiB,EAKZ,GALY,EAKP,GALO,EAKF,GALE,EAKG,GALH,EAKQ,GALR,EAKa,GALb,EAKkB,GALlB,EAKuB,GALvB,EAK4B,GAL5B,EAMjB,GANiB,EAMZ,GANY,EAMP,GANO,EAMF,GANE,EAMG,GANH,EAMQ,GANR,EAOjB,GAPiB,EAOZ,GAPY,EAOP,GAPO,EAOF,GAPE,EAOG,GAPH,EAOQ,GAPR,EAOa,GAPb,EAOkB,GAPlB,EAOuB,GAPvB,EAO4B,GAP5B,EAQjB,GARiB,EAQZ,GARY,EAQN,GARM,EAQF,GARE,EAQG,GARH,EAQQ,GARR,CAArB;;AAWA,QAAIJ,UAAU,CAACK,MAAX,KAAsB,CAA1B,EAA6B;AACzBR,MAAAA,eAAe,CAAC,IAAIS,IAAJ,GAAWC,OAAX,EAAD,CAAf;AACH;;AAED,QAAIH,cAAc,CAACI,QAAf,CAAwBR,UAAU,CAACS,KAAX,CAAiB,CAAC,CAAlB,CAAxB,CAAJ,EAAmD;AAC/CC,MAAAA,aAAa,CAACV,UAAD,EAAaG,aAAb,CAAb;AACAQ,MAAAA,cAAc,CAACX,UAAD,EAAaG,aAAb,CAAd;AACAS,MAAAA,oBAAoB,CAACZ,UAAD,EAAaG,aAAb,CAApB;AACAU,MAAAA,mBAAmB,CAACb,UAAD,CAAnB;AAEAc,MAAAA,QAAQ;AACR1B,MAAAA,KAAK,CAAC2B,cAAN,CAAqBf,UAAU,CAACS,KAAX,CAAiB,CAAC,CAAlB,CAArB;AAEH,KATD,MASO;AACHO,MAAAA,aAAa,CAAC,IAAD,CAAb;AACH;AACJ,GA/BD;;AAiCA,QAAMN,aAAa,GAAG,CAACV,UAAD,EAAaG,aAAb,KAA+B;AAEjD,QAAIf,KAAK,CAAC6B,eAAN,KAA0B,CAA9B,EAAiC;AAC7B3B,MAAAA,aAAa;AAChB;;AAED,QAAIU,UAAU,CAACS,KAAX,CAAiB,CAAC,CAAlB,MAAyBN,aAAa,CAACH,UAAU,CAACK,MAAX,GAAoB,CAArB,CAA1C,EAAmE;AAC/DjB,MAAAA,KAAK,CAAC8B,cAAN;AACA9B,MAAAA,KAAK,CAACsB,aAAN,CAAoB,IAApB;AACH,KAHD,MAGO;AACHtB,MAAAA,KAAK,CAACsB,aAAN,CAAoB,KAApB;AACH;AACJ,GAZD;;AAcA,QAAME,oBAAoB,GAAG,CAACZ,UAAD,EAAaG,aAAb,KAA+B;AACxD,QAAIgB,UAAU,GAAGC,IAAI,CAACC,IAAL,CAAUrB,UAAU,CAACK,MAAX,GAAoBF,aAAa,CAACE,MAAlC,GAA2C,GAArD,CAAjB;AACAjB,IAAAA,KAAK,CAACwB,oBAAN,CAA2BO,UAA3B;AACH,GAHD;;AAKA,QAAMN,mBAAmB,GAAIb,UAAD,IAAgB;AACxC,QAAIsB,YAAY,GAAG,IAAIhB,IAAJ,GAAWC,OAAX,EAAnB;AACA,QAAIgB,aAAa,GAAG,CAACD,YAAY,GAAG1B,QAAhB,IAA4B,IAA5B,GAAmC,EAAvD;AACA,QAAI4B,GAAG,GAAGJ,IAAI,CAACC,IAAL,CAAUrB,UAAU,CAACK,MAAX,GAAoBkB,aAA9B,CAAV;AAEAnC,IAAAA,KAAK,CAACyB,mBAAN,CAA0BW,GAA1B;AACH,GAND;;AAQA,QAAMb,cAAc,GAAG,CAACX,UAAD,EAAaG,aAAb,KAA+B;AAClD,QAAIH,UAAU,CAACK,MAAX,KAAsBF,aAAa,CAACE,MAAxC,EAAgD;AAC5CV,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAL,MAAAA,aAAa;AAChB;AACJ,GALD,CAlE2B,CAyE3B;AACA;AACA;;;AAEA,QAAM0B,aAAa,GAAIS,OAAD,IAAa;AAC/B,SAAKC,QAAL,CAAc;AAAElC,MAAAA,YAAY,EAAEiC;AAAhB,KAAd;AACH,GAFD;;AAIA,QAAMX,QAAQ,GAAG,MAAM;AACnB,QAAIa,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAf;AACA,QAAIC,UAAU,GAAGF,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAjB;AAEAC,IAAAA,UAAU,CAACC,WAAX,IAA0BJ,QAAQ,CAACI,WAAT,CAAqB,CAArB,CAA1B;AACAJ,IAAAA,QAAQ,CAACI,WAAT,GAAuBJ,QAAQ,CAACI,WAAT,CAAqBtB,KAArB,CAA2B,CAA3B,CAAvB;AACH,GAND;;AAQA,QAAMuB,YAAY,GAAG,MAAM;AACvB,SAAKN,QAAL,CAAc;AACVO,MAAAA,WAAW,EAAE,CADH;AAEVzC,MAAAA,YAAY,EAAE,KAFJ;AAGVH,MAAAA,QAAQ,EAAE,KAHA;AAIVK,MAAAA,MAAM,EAAE;AAJE,KAAd;AAMAG,IAAAA,eAAe,CAAC,CAAD,CAAf;AACAP,IAAAA,aAAa,CAAC,KAAD,CAAb;AACAI,IAAAA,MAAM;AAEN,QAAIoC,UAAU,GAAGF,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAjB;AACA,QAAIF,QAAQ,GAAGC,QAAQ,CAACC,cAAT,CAAwB,UAAxB,CAAf;AACA,QAAIK,UAAU,GAAGN,QAAQ,CAACC,cAAT,CAAwB,YAAxB,CAAjB;AAEAC,IAAAA,UAAU,CAACC,WAAX,GAAyB,EAAzB;AACAJ,IAAAA,QAAQ,CAACI,WAAT,GAAuB,EAAvB;AACAG,IAAAA,UAAU,CAAChC,KAAX,GAAmB,EAAnB;AAEAd,IAAAA,KAAK,CAAC4C,YAAN;AACH,GApBD;;AAsBA,sBACI;AAAK,IAAA,SAAS,EAAE/C,KAAK,CAACkD,QAAtB;AAAA,4BACI;AAAO,MAAA,SAAS,MAAhB;AACI,MAAA,QAAQ,EAAE9C,QADd;AAEI,MAAA,QAAQ,EAAES,YAFd;AAGI,MAAA,EAAE,EAAC;AAHP;AAAA;AAAA;AAAA;AAAA,YADJ,eAMI;AAAM,MAAA,SAAS,EAAEb,KAAK,CAACmD,WAAvB;AAAA,8BACI;AAAM,QAAA,EAAE,EAAC,YAAT;AAAsB,QAAA,SAAS,EAAEnD,KAAK,CAACoD;AAAvC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAM,QAAA,EAAE,EAAC,UAAT;AAAoB,QAAA,SAAS,EAAEpD,KAAK,CAACqD,cAArC;AAAA,kBAAsDlD,KAAK,CAACe;AAA5D;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,EAWKd,QAAQ,iBAAI,QAAC,WAAD;AAAa,MAAA,MAAM,EAAEK,MAArB;AAA6B,MAAA,YAAY,EAAEsC;AAA3C;AAAA;AAAA;AAAA;AAAA,YAXjB,EAaKxC,YAAY,iBAAI,QAAC,YAAD;AAAc,MAAA,aAAa,EAAEwB;AAA7B;AAAA;AAAA;AAAA;AAAA,YAbrB;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiBH,CAhID;;GAAM7B,W;;KAAAA,W;AAkIN,eAAeA,WAAfsourcesContent":["import React from 'react';\r\nimport * as PropTypes from 'prop-types';\r\nimport FinishBoard from '../Board/FinishBoard';\r\nimport style from './CustomInput.module.css';\r\nimport ChangeLayout from '../common/ChangeLayout';\r\n\r\n\r\nconst CustomInput = (props) => {\r\n    const [disabled, handleDisable] = React.useState(false);\r\n    const [changeLayout, changeLayoutHandler] = React.useState(false);\r\n    const [result, changeResult] = React.useState(false);\r\n    const [msPassed, msPassedHandler] = React.useState(0);\r\n\r\n    const handleChange = (event) => {\r\n        let inputValue = event.target.value;\r\n        let generatedText = props.generatedText;\r\n\r\n        let allowedSymbols = [\r\n            'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\r\n            'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\r\n            'u', 'v', 'w', 'x', 'y', 'z',\r\n            'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\r\n            'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\r\n            'U', 'V', 'W', 'X', 'Y', 'Z',\r\n            '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',\r\n            ',', '.', `'`, ' ', ';', ':'\r\n        ];\r\n\r\n        if (inputValue.length === 1) {\r\n            msPassedHandler(new Date().getTime());\r\n        }\r\n\r\n        if (allowedSymbols.includes(inputValue.slice(-1))) {\r\n            handleMistake(inputValue, generatedText);\r\n            handleComplete(inputValue, generatedText);\r\n            completionPercentage(inputValue, generatedText);\r\n            charactersPerMinute(inputValue);\r\n\r\n            carriage();\r\n            props.passLastLetter(inputValue.slice(-1));\r\n\r\n        } else {\r\n            layoutHandler(true);\r\n        }\r\n    };\r\n\r\n    const handleMistake = (inputValue, generatedText) => {\r\n\r\n        if (props.numberOfMistake === 2) {\r\n            handleDisable();\r\n        }\r\n\r\n        if (inputValue.slice(-1) !== generatedText[inputValue.length - 1]) {\r\n            props.mistakeCounter();\r\n            props.handleMistake(true);\r\n        } else {\r\n            props.handleMistake(false);\r\n        }\r\n    };\r\n\r\n    const completionPercentage = (inputValue, generatedText) => {\r\n        let percentage = Math.ceil(inputValue.length / generatedText.length * 100);\r\n        props.completionPercentage(percentage);\r\n    };\r\n\r\n    const charactersPerMinute = (inputValue) => {\r\n        let timePassedMs = new Date().getTime();\r\n        let timePassedMin = (timePassedMs - msPassed) / 1000 / 60;\r\n        let cpm = Math.ceil(inputValue.length / timePassedMin);\r\n\r\n        props.charactersPerMinute(cpm);\r\n    };\r\n\r\n    const handleComplete = (inputValue, generatedText) => {\r\n        if (inputValue.length === generatedText.length) {\r\n            changeResult(true);\r\n            handleDisable();\r\n        }\r\n    };\r\n\r\n    // handleDisable = () => {\r\n    //     this.setState({ disabled: true });\r\n    // }\r\n\r\n    const layoutHandler = (boolean) => {\r\n        this.setState({ changeLayout: boolean })\r\n    };\r\n\r\n    const carriage = () => {\r\n        let leftText = document.getElementById('leftText');\r\n        let finishText = document.getElementById('finishText');\r\n\r\n        finishText.textContent += leftText.textContent[0];\r\n        leftText.textContent = leftText.textContent.slice(1);\r\n    };\r\n\r\n    const reloadLesson = () => {\r\n        this.setState({\r\n            startTimeMs: 0,\r\n            changeLayout: false,\r\n            disabled: false,\r\n            result: false,\r\n        });\r\n        msPassedHandler(0);\r\n        handleDisable(false);\r\n        result\r\n\r\n        let finishText = document.getElementById('finishText');\r\n        let leftText = document.getElementById('leftText');\r\n        let inputField = document.getElementById('inputField');\r\n\r\n        finishText.textContent = '';\r\n        leftText.textContent = '';\r\n        inputField.value = '';\r\n\r\n        props.reloadLesson();\r\n    }\r\n\r\n    return (\r\n        <div className={style.InputBox}>\r\n            <input autoFocus\r\n                disabled={disabled}\r\n                onChange={handleChange}\r\n                id='inputField'\r\n            />\r\n            <span className={style.displayText}>\r\n                <span id='finishText' className={style.cursor} />\r\n                <span id='leftText' className={style.unfinishedText}>{props.generatedText}</span>\r\n            </span>\r\n\r\n            {disabled && <FinishBoard result={result} reloadLesson={reloadLesson} />}\r\n\r\n            {changeLayout && <ChangeLayout layoutHandler={layoutHandler} />}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default CustomInput;\r\n\r\n\r\n// class CustomInput extends React.Component {\r\n\r\n//     constructor(props) {\r\n//         super(props)\r\n//         this.state = {\r\n//             startTimeMs: 0,\r\n//             changeLayout: false,\r\n//             disabled: false,\r\n//             result: false,\r\n//         }\r\n//     }\r\n\r\n//     handleChange = (event) => {\r\n//         let inputValue = event.target.value;\r\n//         let generatedText = this.props.generatedText;\r\n\r\n//         let allowedSymbols = [\r\n//             'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\r\n//             'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't',\r\n//             'u', 'v', 'w', 'x', 'y', 'z',\r\n//             'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J',\r\n//             'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T',\r\n//             'U', 'V', 'W', 'X', 'Y', 'Z',\r\n//             '1', '2', '3', '4', '5', '6', '7', '8', '9', '0',\r\n//             ',', '.', `'`, ' ', ';', ':'\r\n//         ];\r\n\r\n//         if (inputValue.length === 1) {\r\n//             this.setState({ startTimeMs: new Date().getTime() });\r\n//         }\r\n\r\n//         if (allowedSymbols.includes(inputValue.slice(-1))) {\r\n//             this.handleMistake(inputValue, generatedText);\r\n//             this.handleComplete(inputValue, generatedText);\r\n//             this.completionPercentage(inputValue, generatedText);\r\n//             this.charactersPerMinute(inputValue);\r\n\r\n//             this.carriage();\r\n//             this.props.passLastLetter(inputValue.slice(-1));\r\n\r\n//         } else {\r\n//             this.layoutHandler(true);\r\n//         }\r\n//     }\r\n\r\n//     handleMistake = (inputValue, generatedText) => {\r\n\r\n//         if (this.props.numberOfMistake === 2) {\r\n//             this.handleDisable();\r\n//         }\r\n\r\n//         if (inputValue.slice(-1) !== generatedText[inputValue.length - 1]) {\r\n//             this.props.mistakeCounter();\r\n//             this.props.handleMistake(true);\r\n//         } else {\r\n//             this.props.handleMistake(false);\r\n//         }\r\n//     }\r\n\r\n//     completionPercentage = (inputValue, generatedText) => {\r\n//         let percentage = Math.ceil(inputValue.length / generatedText.length * 100);\r\n//         this.props.completionPercentage(percentage);\r\n//     }\r\n\r\n//     charactersPerMinute = (inputValue) => {\r\n//         let startTimeMs = this.state.startTimeMs;\r\n\r\n//         let timePassedMs = new Date().getTime();\r\n//         let timePassedMin = (timePassedMs - startTimeMs) / 1000 / 60;\r\n//         let cpm = Math.ceil(inputValue.length / timePassedMin);\r\n\r\n//         this.props.charactersPerMinute(cpm);\r\n//     }\r\n\r\n//     handleComplete = (inputValue, generatedText) => {\r\n//         if (inputValue.length === generatedText.length) {\r\n//             this.setState({ result: true });\r\n//             this.handleDisable();\r\n//         }\r\n//     }\r\n\r\n//     handleDisable = () => {\r\n//         this.setState({ disabled: true });\r\n//     }\r\n\r\n//     layoutHandler = (boolean) => {\r\n//         this.setState({ changeLayout: boolean })\r\n//     }\r\n\r\n//     carriage = () => {\r\n//         let leftText = document.getElementById('leftText');\r\n//         let finishText = document.getElementById('finishText');\r\n\r\n//         finishText.textContent += leftText.textContent[0];\r\n//         leftText.textContent = leftText.textContent.slice(1);\r\n//     }\r\n\r\n//     reloadLesson = () => {\r\n//         this.setState({\r\n//             startTimeMs: 0,\r\n//             changeLayout: false,\r\n//             disabled: false,\r\n//             result: false,\r\n//         });\r\n\r\n//         let finishText = document.getElementById('finishText');\r\n//         let leftText = document.getElementById('leftText');\r\n//         let inputField = document.getElementById('inputField');\r\n\r\n//         finishText.textContent = '';\r\n//         leftText.textContent = '';\r\n//         inputField.value = '';\r\n\r\n//         this.props.reloadLesson();\r\n//     }\r\n\r\n//     render = () => {\r\n//         return (\r\n//             <div className={style.InputBox}>\r\n//                 <input autoFocus\r\n//                     disabled={this.state.disabled}\r\n//                     onChange={this.handleChange}\r\n//                     id='inputField'\r\n//                 />\r\n//                 <span className={style.displayText}>\r\n//                     <span id='finishText' className={style.cursor} />\r\n//                     <span id='leftText' className={style.unfinishedText}>{this.props.generatedText}</span>\r\n//                 </span>\r\n\r\n//                 {this.state.disabled && <FinishBoard result={this.state.result} reloadLesson={this.reloadLesson} />}\r\n\r\n//                 {this.state.changeLayout && <ChangeLayout layoutHandler={this.layoutHandler} />}\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// CustomInput.propTypes = {\r\n//     generatedText: PropTypes.string,\r\n//     reloadLesson: PropTypes.func,\r\n\r\n//     numberOfMistake: PropTypes.number,\r\n//     handleMistake: PropTypes.func,\r\n//     mistakeCounter: PropTypes.func,\r\n\r\n//     completionPercentage: PropTypes.func,\r\n//     charactersPerMinute: PropTypes.func,\r\n\r\n//     passLastLetter: PropTypes.func\r\n// }\r\n\r\n// export default CustomInput;"]},"metadata":{},"sourceType":"module"}